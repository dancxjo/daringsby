use futures::Stream;
use futures::StreamExt;
use std::any::Any;
use std::sync::Arc;
use tokio::sync::broadcast;
use tokio_stream::wrappers::BroadcastStream;

/// Cognitive topics exchanged between Wits.
///
/// These define the semantic channels used for communication within the
/// `psyche`. Each variant represents a stage in Pete's cognitive stack,
/// following the arc from raw sensation to high-level identity.
///
/// Topics are implemented as typed channels using [`Topic<T>`] and consumed via
/// the [`TopicBus`] for decoupled publish/subscribe communication.
#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]
pub enum Topic {
    /// 🧿 Raw sensory input from the environment.
    ///
    /// Emitted by sensors like audio transcribers, webcam processors,
    /// geolocation, or heartbeat. Received by the Quick and other low-level
    /// perception components.
    Sensation,

    /// ⚡️ Immediate perceptual awareness.
    ///
    /// Generated by the Quick by summarizing a batch of [`Sensation`]s into a
    /// single coherent [`Instant`]. Represents Pete’s immediate experience
    /// (“I see a fly approaching”).
    Instant,

    /// 🧭 Integrated summary of nearby events.
    ///
    /// Emitted by the Combobulator by collecting several [`Instant`]s into a
    /// cohesive [`Moment`]. Useful for recognizing short patterns or behavior
    /// changes (“The fly hovered near me for a few seconds”).
    Moment,

    /// 🧩 Contextualized narrative.
    ///
    /// A broader frame that gathers multiple [`Moment`]s into a structured
    /// [`Situation`]. Useful for forming a behavioral stance (“There is prey
    /// nearby, and I am preparing to strike”).
    Situation,

    /// 🧠 Episodic memory trace.
    ///
    /// Constructed by Memory using linked [`Impression`]s. Represents a durable
    /// event in Pete’s timeline.
    /// (“Earlier today, I saw a spider stalk a fly, then retreat.”)
    Episode,

    /// 🪞 Narrative self-image.
    ///
    /// Maintained by Identity (FondDuCoeur). A paragraph-long summary of
    /// Pete’s self-perception, role, and goals.
    /// Regularly updated as Pete changes or reflects.
    Identity,

    /// 🛠️ Intent to act.
    ///
    /// Emitted by the Will. Contains an LLM-parsed imperative like `<say>` or
    /// `<leap>`, along with semantic parameters.
    /// Interpreted by the Voice, Motor, or other effectors.
    Instruction,

    /// 🧬 Facial recognition metadata.
    ///
    /// Encodes face vectors or named face matches seen in camera input.
    /// Shared with Memory and Vision for grounding social identity.
    FaceInfo,
}

/// Envelope for topic messages carrying any payload.
#[derive(Debug, Clone)]
pub struct TopicMessage {
    /// Topic this message belongs to.
    pub topic: Topic,
    /// Opaque payload associated with the topic.
    pub payload: Arc<dyn Any + Send + Sync>,
}

/// Simple async pub/sub bus tagged by [`Topic`].
#[derive(Clone)]
pub struct TopicBus {
    tx: broadcast::Sender<TopicMessage>,
}

impl TopicBus {
    /// Create a new bus with the given channel capacity.
    pub fn new(capacity: usize) -> Self {
        let (tx, _r) = broadcast::channel(capacity);
        Self { tx }
    }

    /// Publish `payload` on `topic` to all subscribers.
    pub fn publish(&self, topic: Topic, payload: impl Any + Send + Sync + 'static) {
        let _ = self.tx.send(TopicMessage {
            topic,
            payload: Arc::new(payload),
        });
    }

    /// Subscribe to messages tagged with `topic`.
    pub fn subscribe(&self, topic: Topic) -> impl Stream<Item = Arc<dyn Any + Send + Sync>> {
        BroadcastStream::new(self.tx.subscribe()).filter_map(move |res| {
            let topic = topic;
            async move {
                match res {
                    Ok(msg) if msg.topic == topic => Some(msg.payload),
                    _ => None,
                }
            }
        })
    }

    /// Subscribe to all raw messages.
    pub fn subscribe_raw(&self) -> broadcast::Receiver<TopicMessage> {
        self.tx.subscribe()
    }
}
