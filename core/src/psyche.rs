use crate::{fond::FondDuCoeur, witness::WitnessAgent};
use voice::{VoiceAgent, VoiceOutput};

/// Maintains Pete's current stream of consciousness.
pub struct Psyche<V: VoiceAgent> {
    /// Collects sensations from the environment.
    pub witness: WitnessAgent,
    /// Generates narration from context.
    pub voice: V,
    /// The latest summary of experiences.
    pub here_and_now: String,
    fond: FondDuCoeur,
}

impl<V: VoiceAgent> Psyche<V> {
    /// Create a new psyche with the given subagents.
    pub fn new(witness: WitnessAgent, voice: V) -> Self {
        Self {
            witness,
            voice,
            here_and_now: String::new(),
            fond: FondDuCoeur::new(),
        }
    }

    /// Update internal state from the [`WitnessAgent`] and ask the
    /// [`VoiceAgent`] to narrate the result.
    pub async fn tick(&mut self) -> VoiceOutput {
        if let Some(sum) = self.witness.summarize(&mut self.fond).await {
            self.here_and_now = sum;
        }
        self.voice.narrate(&self.here_and_now).await
    }

    /// Retrieve the identity paragraph generated by [`FondDuCoeur`].
    pub fn fond_identity(&self) -> &str {
        self.fond.identity()
    }
}
