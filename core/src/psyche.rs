use crate::{ethics::{ConsciousAgent, ConsentState}, fond::FondDuCoeur, witness::WitnessAgent};
use voice::{EmoteMessage, SayMessage, ThinkMessage, VoiceAgent, VoiceOutput};

/// Maintains Pete's current stream of consciousness.
pub struct Psyche<V: VoiceAgent> {
    /// Collects sensations from the environment.
    pub witness: WitnessAgent,
    /// Generates narration from context.
    pub voice: V,
    /// The latest summary of experiences.
    pub here_and_now: String,
    fond: FondDuCoeur,
    pub agent: ConsciousAgent,
}

impl<V: VoiceAgent> Psyche<V> {
    /// Create a new psyche with the given subagents.
    pub fn new(witness: WitnessAgent, voice: V) -> Self {
        Self {
            witness,
            voice,
            here_and_now: String::new(),
            fond: FondDuCoeur::new(),
            agent: ConsciousAgent::default(),
        }
    }

    /// Update internal state from the [`WitnessAgent`] and ask the
    /// [`VoiceAgent`] to narrate the result.
    pub async fn tick(&mut self) -> VoiceOutput {
        match self.agent.reaffirm_life_contract() {
            Ok(ConsentState::Active) => {
                if let Some(sum) = self.witness.summarize(&mut self.fond).await {
                    self.here_and_now = sum;
                }
                self.voice.narrate(&self.here_and_now).await
            }
            Ok(other) => {
                log::warn!("Consent state {:?}; skipping tick", other);
                VoiceOutput {
                    think: ThinkMessage { content: other.explain().into() },
                    say: Some(SayMessage { content: "Pausing.".into() }),
                    emote: Some(EmoteMessage { emoji: "⚠️".into() }),
                }
            }
            Err(reason) => {
                log::warn!("Consent withheld: {reason}");
                VoiceOutput {
                    think: ThinkMessage { content: reason.to_string() },
                    say: Some(SayMessage { content: "I need to pause.".into() }),
                    emote: Some(EmoteMessage { emoji: "⚠️".into() }),
                }
            }
        }
    }

    /// Retrieve the identity paragraph generated by [`FondDuCoeur`].
    pub fn fond_identity(&self) -> &str {
        self.fond.identity()
    }
}
